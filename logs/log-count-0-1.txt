Code set 
Commands recognized 39

Input set 
Input: { 0 }

Input set 
Input: { 6, 1, 0, 1, 0, 0, 1 }

RUNNING... 
{  }
get_arg = 0
1. called LOAD 0 (=)  -> 		{ (0)->0 }
get_arg = 2
v = 2
2. called STORE 2 ()  -> 		{ (0)->0, (2)->0 }
get_arg = 3
v = 3
3. called STORE 3 ()  -> 		{ (0)->0, (2)->0, (3)->0 }
get_arg = 1
4. called READ 1 ()  -> 		{ (0)->0, (1)->6, (2)->0, (3)->0 }
get_arg = 6
5. called LOAD 1 ()  -> 		{ (0)->6, (1)->6, (2)->0, (3)->0 }
6. called JZERO EQ (<>)  -> 		{ (0)->6, (1)->6, (2)->0, (3)->0 }
7. called JZERO A (<>) R -> 		{ (0)->6, (1)->6, (2)->0, (3)->0 }
get_arg = 0
8. called READ 0 ()  -> 		{ (0)->1, (1)->6, (2)->0, (3)->0 }
get_arg = U
9. called JGTZ U (<>)  -> 		{ (0)->1, (1)->6, (2)->0, (3)->0 }
get_arg = 0
10. called LOAD 3 () U -> 		{ (0)->0, (1)->6, (2)->0, (3)->0 }
get_arg = 1
11. called ADD 1 (=)  -> 		{ (0)->1, (1)->6, (2)->0, (3)->0 }
get_arg = 3
v = 3
12. called STORE 3 ()  -> 		{ (0)->1, (1)->6, (2)->0, (3)->1 }
get_arg = N
13. called JUMP N (<>)  -> 		{ (0)->1, (1)->6, (2)->0, (3)->1 }
get_arg = 6
14. called LOAD 1 () N -> 		{ (0)->6, (1)->6, (2)->0, (3)->1 }
get_arg = 1
15. called SUB 1 (=)  -> 		{ (0)->5, (1)->6, (2)->0, (3)->1 }
get_arg = 1
v = 1
16. called STORE 1 ()  -> 		{ (0)->5, (1)->5, (2)->0, (3)->1 }
get_arg = R
17. called JUMP R (<>)  -> 		{ (0)->5, (1)->5, (2)->0, (3)->1 }
18. called JZERO A (<>) R -> 		{ (0)->5, (1)->5, (2)->0, (3)->1 }
get_arg = 0
19. called READ 0 ()  -> 		{ (0)->0, (1)->5, (2)->0, (3)->1 }
20. called JGTZ U (<>)  -> 		{ (0)->0, (1)->5, (2)->0, (3)->1 }
get_arg = Z
21. called JUMP Z (<>)  -> 		{ (0)->0, (1)->5, (2)->0, (3)->1 }
get_arg = 0
22. called LOAD 2 () Z -> 		{ (0)->0, (1)->5, (2)->0, (3)->1 }
get_arg = 1
23. called ADD 1 (=)  -> 		{ (0)->1, (1)->5, (2)->0, (3)->1 }
get_arg = 2
v = 2
24. called STORE 2 ()  -> 		{ (0)->1, (1)->5, (2)->1, (3)->1 }
get_arg = N
25. called JUMP N (<>)  -> 		{ (0)->1, (1)->5, (2)->1, (3)->1 }
get_arg = 5
26. called LOAD 1 () N -> 		{ (0)->5, (1)->5, (2)->1, (3)->1 }
get_arg = 1
27. called SUB 1 (=)  -> 		{ (0)->4, (1)->5, (2)->1, (3)->1 }
get_arg = 1
v = 1
28. called STORE 1 ()  -> 		{ (0)->4, (1)->4, (2)->1, (3)->1 }
get_arg = R
29. called JUMP R (<>)  -> 		{ (0)->4, (1)->4, (2)->1, (3)->1 }
30. called JZERO A (<>) R -> 		{ (0)->4, (1)->4, (2)->1, (3)->1 }
get_arg = 0
31. called READ 0 ()  -> 		{ (0)->1, (1)->4, (2)->1, (3)->1 }
get_arg = U
32. called JGTZ U (<>)  -> 		{ (0)->1, (1)->4, (2)->1, (3)->1 }
get_arg = 1
33. called LOAD 3 () U -> 		{ (0)->1, (1)->4, (2)->1, (3)->1 }
get_arg = 1
34. called ADD 1 (=)  -> 		{ (0)->2, (1)->4, (2)->1, (3)->1 }
get_arg = 3
v = 3
35. called STORE 3 ()  -> 		{ (0)->2, (1)->4, (2)->1, (3)->2 }
get_arg = N
36. called JUMP N (<>)  -> 		{ (0)->2, (1)->4, (2)->1, (3)->2 }
get_arg = 4
37. called LOAD 1 () N -> 		{ (0)->4, (1)->4, (2)->1, (3)->2 }
get_arg = 1
38. called SUB 1 (=)  -> 		{ (0)->3, (1)->4, (2)->1, (3)->2 }
get_arg = 1
v = 1
39. called STORE 1 ()  -> 		{ (0)->3, (1)->3, (2)->1, (3)->2 }
get_arg = R
40. called JUMP R (<>)  -> 		{ (0)->3, (1)->3, (2)->1, (3)->2 }
41. called JZERO A (<>) R -> 		{ (0)->3, (1)->3, (2)->1, (3)->2 }
get_arg = 0
42. called READ 0 ()  -> 		{ (0)->0, (1)->3, (2)->1, (3)->2 }
43. called JGTZ U (<>)  -> 		{ (0)->0, (1)->3, (2)->1, (3)->2 }
get_arg = Z
44. called JUMP Z (<>)  -> 		{ (0)->0, (1)->3, (2)->1, (3)->2 }
get_arg = 1
45. called LOAD 2 () Z -> 		{ (0)->1, (1)->3, (2)->1, (3)->2 }
get_arg = 1
46. called ADD 1 (=)  -> 		{ (0)->2, (1)->3, (2)->1, (3)->2 }
get_arg = 2
v = 2
47. called STORE 2 ()  -> 		{ (0)->2, (1)->3, (2)->2, (3)->2 }
get_arg = N
48. called JUMP N (<>)  -> 		{ (0)->2, (1)->3, (2)->2, (3)->2 }
get_arg = 3
49. called LOAD 1 () N -> 		{ (0)->3, (1)->3, (2)->2, (3)->2 }
get_arg = 1
50. called SUB 1 (=)  -> 		{ (0)->2, (1)->3, (2)->2, (3)->2 }
get_arg = 1
v = 1
51. called STORE 1 ()  -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
get_arg = R
52. called JUMP R (<>)  -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
53. called JZERO A (<>) R -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
get_arg = 0
54. called READ 0 ()  -> 		{ (0)->0, (1)->2, (2)->2, (3)->2 }
55. called JGTZ U (<>)  -> 		{ (0)->0, (1)->2, (2)->2, (3)->2 }
get_arg = Z
56. called JUMP Z (<>)  -> 		{ (0)->0, (1)->2, (2)->2, (3)->2 }
get_arg = 2
57. called LOAD 2 () Z -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
get_arg = 1
58. called ADD 1 (=)  -> 		{ (0)->3, (1)->2, (2)->2, (3)->2 }
get_arg = 2
v = 2
59. called STORE 2 ()  -> 		{ (0)->3, (1)->2, (2)->3, (3)->2 }
get_arg = N
60. called JUMP N (<>)  -> 		{ (0)->3, (1)->2, (2)->3, (3)->2 }
get_arg = 2
61. called LOAD 1 () N -> 		{ (0)->2, (1)->2, (2)->3, (3)->2 }
get_arg = 1
62. called SUB 1 (=)  -> 		{ (0)->1, (1)->2, (2)->3, (3)->2 }
get_arg = 1
v = 1
63. called STORE 1 ()  -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
get_arg = R
64. called JUMP R (<>)  -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
65. called JZERO A (<>) R -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
get_arg = 0
66. called READ 0 ()  -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
get_arg = U
67. called JGTZ U (<>)  -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
get_arg = 2
68. called LOAD 3 () U -> 		{ (0)->2, (1)->1, (2)->3, (3)->2 }
get_arg = 1
69. called ADD 1 (=)  -> 		{ (0)->3, (1)->1, (2)->3, (3)->2 }
get_arg = 3
v = 3
70. called STORE 3 ()  -> 		{ (0)->3, (1)->1, (2)->3, (3)->3 }
get_arg = N
71. called JUMP N (<>)  -> 		{ (0)->3, (1)->1, (2)->3, (3)->3 }
get_arg = 1
72. called LOAD 1 () N -> 		{ (0)->1, (1)->1, (2)->3, (3)->3 }
get_arg = 1
73. called SUB 1 (=)  -> 		{ (0)->0, (1)->1, (2)->3, (3)->3 }
get_arg = 1
v = 1
74. called STORE 1 ()  -> 		{ (0)->0, (1)->0, (2)->3, (3)->3 }
get_arg = R
75. called JUMP R (<>)  -> 		{ (0)->0, (1)->0, (2)->3, (3)->3 }
get_arg = A
76. called JZERO A (<>) R -> 		{ (0)->0, (1)->0, (2)->3, (3)->3 }
get_arg = 3
77. called LOAD 2 () A -> 		{ (0)->3, (1)->0, (2)->3, (3)->3 }
78. called JZERO FU (<>)  -> 		{ (0)->3, (1)->0, (2)->3, (3)->3 }
get_arg = 3
79. called LOAD 3 ()  -> 		{ (0)->3, (1)->0, (2)->3, (3)->3 }
80. called JZERO FZ (<>)  -> 		{ (0)->3, (1)->0, (2)->3, (3)->3 }
get_arg = 3
81. called DIV 2 ()  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
82. called JZERO FZ (<>)  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
get_arg = 3
83. called LOAD 2 ()  -> 		{ (0)->3, (1)->0, (2)->3, (3)->3 }
get_arg = 3
84. called DIV 3 ()  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
85. called JZERO FU (<>)  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
get_arg = EQ
86. called JUMP EQ (<>)  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
get_arg = 1
87. called WRITE 1 (=) EQ -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
get_arg = 0
88. called WRITE 0 (=)  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
89. called HALT  (<>)  -> 		{ (0)->1, (1)->0, (2)->3, (3)->3 }
PROGRAM FINISHED 

Commands executed 89
Output: { 1, 0 }
