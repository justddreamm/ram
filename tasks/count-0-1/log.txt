Code set 
Commands recognized 39

Input set { 5, 1, 0, 1, 0, 0 }

Machine name set count-0-1

RUNNING count-0-1
 1. LOAD 0 (=)  -> 		{ (0)->0 }
 2. STORE 2 ()  -> 		{ (0)->0, (2)->0 }
 3. STORE 3 ()  -> 		{ (0)->0, (2)->0, (3)->0 }
 4. READ 1 ()  -> 		{ (0)->0, (1)->5, (2)->0, (3)->0 }
 5. LOAD 1 ()  -> 		{ (0)->5, (1)->5, (2)->0, (3)->0 }
 6. JZERO EQL (<>)  -> 		{ (0)->5, (1)->5, (2)->0, (3)->0 }
 7. JZERO A (<>) R -> 		{ (0)->5, (1)->5, (2)->0, (3)->0 }
 8. READ 0 ()  -> 		{ (0)->1, (1)->5, (2)->0, (3)->0 }
 9. JGTZ U (<>)  -> 		{ (0)->1, (1)->5, (2)->0, (3)->0 }
10. LOAD 3 () U -> 		{ (0)->0, (1)->5, (2)->0, (3)->0 }
11. ADD 1 (=)  -> 		{ (0)->1, (1)->5, (2)->0, (3)->0 }
12. STORE 3 ()  -> 		{ (0)->1, (1)->5, (2)->0, (3)->1 }
13. JUMP N (<>)  -> 		{ (0)->1, (1)->5, (2)->0, (3)->1 }
14. LOAD 1 () N -> 		{ (0)->5, (1)->5, (2)->0, (3)->1 }
15. SUB 1 (=)  -> 		{ (0)->4, (1)->5, (2)->0, (3)->1 }
16. STORE 1 ()  -> 		{ (0)->4, (1)->4, (2)->0, (3)->1 }
17. JUMP R (<>)  -> 		{ (0)->4, (1)->4, (2)->0, (3)->1 }
18. JZERO A (<>) R -> 		{ (0)->4, (1)->4, (2)->0, (3)->1 }
19. READ 0 ()  -> 		{ (0)->0, (1)->4, (2)->0, (3)->1 }
20. JGTZ U (<>)  -> 		{ (0)->0, (1)->4, (2)->0, (3)->1 }
21. JUMP Z (<>)  -> 		{ (0)->0, (1)->4, (2)->0, (3)->1 }
22. LOAD 2 () Z -> 		{ (0)->0, (1)->4, (2)->0, (3)->1 }
23. ADD 1 (=)  -> 		{ (0)->1, (1)->4, (2)->0, (3)->1 }
24. STORE 2 ()  -> 		{ (0)->1, (1)->4, (2)->1, (3)->1 }
25. JUMP N (<>)  -> 		{ (0)->1, (1)->4, (2)->1, (3)->1 }
26. LOAD 1 () N -> 		{ (0)->4, (1)->4, (2)->1, (3)->1 }
27. SUB 1 (=)  -> 		{ (0)->3, (1)->4, (2)->1, (3)->1 }
28. STORE 1 ()  -> 		{ (0)->3, (1)->3, (2)->1, (3)->1 }
29. JUMP R (<>)  -> 		{ (0)->3, (1)->3, (2)->1, (3)->1 }
30. JZERO A (<>) R -> 		{ (0)->3, (1)->3, (2)->1, (3)->1 }
31. READ 0 ()  -> 		{ (0)->1, (1)->3, (2)->1, (3)->1 }
32. JGTZ U (<>)  -> 		{ (0)->1, (1)->3, (2)->1, (3)->1 }
33. LOAD 3 () U -> 		{ (0)->1, (1)->3, (2)->1, (3)->1 }
34. ADD 1 (=)  -> 		{ (0)->2, (1)->3, (2)->1, (3)->1 }
35. STORE 3 ()  -> 		{ (0)->2, (1)->3, (2)->1, (3)->2 }
36. JUMP N (<>)  -> 		{ (0)->2, (1)->3, (2)->1, (3)->2 }
37. LOAD 1 () N -> 		{ (0)->3, (1)->3, (2)->1, (3)->2 }
38. SUB 1 (=)  -> 		{ (0)->2, (1)->3, (2)->1, (3)->2 }
39. STORE 1 ()  -> 		{ (0)->2, (1)->2, (2)->1, (3)->2 }
40. JUMP R (<>)  -> 		{ (0)->2, (1)->2, (2)->1, (3)->2 }
41. JZERO A (<>) R -> 		{ (0)->2, (1)->2, (2)->1, (3)->2 }
42. READ 0 ()  -> 		{ (0)->0, (1)->2, (2)->1, (3)->2 }
43. JGTZ U (<>)  -> 		{ (0)->0, (1)->2, (2)->1, (3)->2 }
44. JUMP Z (<>)  -> 		{ (0)->0, (1)->2, (2)->1, (3)->2 }
45. LOAD 2 () Z -> 		{ (0)->1, (1)->2, (2)->1, (3)->2 }
46. ADD 1 (=)  -> 		{ (0)->2, (1)->2, (2)->1, (3)->2 }
47. STORE 2 ()  -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
48. JUMP N (<>)  -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
49. LOAD 1 () N -> 		{ (0)->2, (1)->2, (2)->2, (3)->2 }
50. SUB 1 (=)  -> 		{ (0)->1, (1)->2, (2)->2, (3)->2 }
51. STORE 1 ()  -> 		{ (0)->1, (1)->1, (2)->2, (3)->2 }
52. JUMP R (<>)  -> 		{ (0)->1, (1)->1, (2)->2, (3)->2 }
53. JZERO A (<>) R -> 		{ (0)->1, (1)->1, (2)->2, (3)->2 }
54. READ 0 ()  -> 		{ (0)->0, (1)->1, (2)->2, (3)->2 }
55. JGTZ U (<>)  -> 		{ (0)->0, (1)->1, (2)->2, (3)->2 }
56. JUMP Z (<>)  -> 		{ (0)->0, (1)->1, (2)->2, (3)->2 }
57. LOAD 2 () Z -> 		{ (0)->2, (1)->1, (2)->2, (3)->2 }
58. ADD 1 (=)  -> 		{ (0)->3, (1)->1, (2)->2, (3)->2 }
59. STORE 2 ()  -> 		{ (0)->3, (1)->1, (2)->3, (3)->2 }
60. JUMP N (<>)  -> 		{ (0)->3, (1)->1, (2)->3, (3)->2 }
61. LOAD 1 () N -> 		{ (0)->1, (1)->1, (2)->3, (3)->2 }
62. SUB 1 (=)  -> 		{ (0)->0, (1)->1, (2)->3, (3)->2 }
63. STORE 1 ()  -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
64. JUMP R (<>)  -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
65. JZERO A (<>) R -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
66. LOAD 2 () A -> 		{ (0)->3, (1)->0, (2)->3, (3)->2 }
67. JZERO FU (<>)  -> 		{ (0)->3, (1)->0, (2)->3, (3)->2 }
68. LOAD 3 ()  -> 		{ (0)->2, (1)->0, (2)->3, (3)->2 }
69. JZERO FZ (<>)  -> 		{ (0)->2, (1)->0, (2)->3, (3)->2 }
70. DIV 2 ()  -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
71. JZERO FZ (<>)  -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
72. WRITE 0 (=) FZ -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
73. HALT  (<>)  -> 		{ (0)->0, (1)->0, (2)->3, (3)->2 }
PROGRAM FINISHED 

Commands executed 73
Output: { 0 }
